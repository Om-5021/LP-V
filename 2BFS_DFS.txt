#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <omp.h>

using namespace std;

class Graph {
    int V;
    vector<vector<int>> adj;

public:
    Graph(int V) {
        this->V = V;
        adj.resize(V);
    }

    void addEdge(int v, int w) {
        adj[v].push_back(w);
        adj[w].push_back(v);
    }

    // Level-synchronous Parallel BFS
    void parallelBFS(int start) {
        vector<bool> visited(V, false);
        vector<int> frontier = {start};
        visited[start] = true;

        cout << "Parallel BFS Traversal: ";

        while (!frontier.empty()) {
            vector<int> next_frontier;

            #pragma omp parallel for
            for (int i = 0; i < frontier.size(); ++i) {
                int node = frontier[i];
                #pragma omp critical
                cout << node << " ";

                for (int neighbor : adj[node]) {
                    bool expected = false;

                    // Atomic check-and-set
                    if (!visited[neighbor]) {
                        #pragma omp critical
                        {
                            if (!visited[neighbor]) {
                                visited[neighbor] = true;
                                next_frontier.push_back(neighbor);
                            }
                        }
                    }
                }
            }

            frontier = next_frontier;
        }
        cout << endl;
    }

    // Sequential DFS (parallel DFS is impractical due to stack dependency)
    void dfsUtil(int node, vector<bool>& visited) {
        visited[node] = true;
        cout << node << " ";

        for (int neighbor : adj[node]) {
            if (!visited[neighbor]) {
                dfsUtil(neighbor, visited);
            }
        }
    }

    void dfs(int start) {
        vector<bool> visited(V, false);
        cout << "DFS Traversal: ";
        dfsUtil(start, visited);
        cout << endl;
    }
};

int main() {
    Graph g(6);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);

    cout << "Starting BFS from node 0:" << endl;
    g.parallelBFS(0);

    cout << "Starting DFS from node 0:" << endl;
    g.dfs(0);

    return 0;
}

/*
g++ -fopenmp -O2 graph_traversal.cpp -o graph_traversal
./graph_traversal

OUTPUT:-Starting BFS from node 0:
Parallel BFS Traversal: 0 2 1 5 4 3 
Starting DFS from node 0:
DFS Traversal: 0 1 3 4 2 5 


*/